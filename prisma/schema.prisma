generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost:3306/sf2025"
}

model access {
  sno                     Int      @id @default(autoincrement())
  Roles                   Int
  messaging_in_ca         Int      @default(1) @map("messaging in ca")
  Event_registration      Int      @default(1) @map("Event registration")
  Awarding_points_to_CA   Int      @default(1) @map("Awarding points to CA")
  Payment_status_view     Int      @default(1) @map("Payment status view")
  Payment_status_edit     Int      @default(1) @map("Payment status edit")
  Events_writeup_edit     Int      @default(1) @map("Events writeup edit")
  edit                    Int      @default(1)
  gender_yop_dob          Int?     @default(1) @map("gender yop dob")
  email_mobile_score_edit Int      @default(1) @map("email mobile score edit")
  Accomodation_status     Int      @default(1) @map("Accomodation status")
  Event_Probables         Int      @default(1) @map("Event Probables")
  Hospitality             Int      @default(1)
  Notify                  Int      @default(1)
  Complaints              Int      @default(1)
  Exclusives              Int      @default(1)
  TXN                     Int      @default(1)
  Registration_Data       Int      @default(1) @map("Registration Data")
  CA_Admin                Int      @default(1) @map("CA Admin")
  Admins                  Int      @default(1)
  Payment_Allowance       Int      @default(1) @map("Payment Allowance")
  fb_share                Int      @default(1) @map("fb share")
  silent_dj               Int      @default(1) @map("silent dj")
  updated_at              DateTime @updatedAt @db.Timestamp(0)
}

model accommodations {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  txn_id         String    @unique(map: "txn_id") @db.VarChar(255)
  check_in       DateTime? @db.DateTime(0)
  check_out      DateTime? @db.DateTime(0)
  p_male         Int       @default(0)
  p_female       Int       @default(0)
  status         Boolean   @default(false)
  hall           String?   @db.Text
  emergency      BigInt
  blanket        Int       @default(0)
  payment_status String    @db.VarChar(20)
  checked_out    Boolean   @default(false)
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @updatedAt @db.Timestamp(0)
}

model activity {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(1000)
  text       String   @db.VarChar(1000)
  time       String   @db.VarChar(100)
  date       String?  @db.VarChar(100)
  link       String?  @db.VarChar(100)
  live       Int      @db.TinyInt
  category   String   @db.VarChar(100)
  updated_at DateTime @updatedAt @db.DateTime(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model admin {
  id       Int
  username String @db.VarChar(20)
  password String @db.VarChar(20)

  @@ignore
}

model admins {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  email      String    @db.VarChar(255)
  role       Int
  status     Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  name       String    @db.VarChar(64)

  @@index([email], map: "email")
}

model admins_for_cap {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  name       String   @db.VarChar(100)
  email      String   @db.VarChar(100)
  role       Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
}

model alumni {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(50)
  email        String    @unique(map: "email") @db.VarChar(50)
  password     String    @db.VarChar(35)
  mobile       String    @unique(map: "mobile") @db.VarChar(10)
  dp           String    @db.VarChar(20)
  dept         String    @db.VarChar(50)
  course       String    @db.VarChar(50)
  year         String    @db.VarChar(4)
  hall         String    @db.VarChar(50)
  societies    String    @db.VarChar(100)
  currently_at String    @db.VarChar(50)
  address      String    @db.VarChar(200)
  token        String    @db.VarChar(15)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime  @updatedAt @db.Timestamp(0)
}

model alumni_posts {
  id         Int       @id @default(autoincrement())
  alumni_id  Int
  post       String    @db.VarChar(200)
  visibility String    @db.VarChar(50)
  filename   String?   @default("") @db.VarChar(100)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime  @updatedAt @db.Timestamp(0)

  @@map("alumni-posts")
}

model alumni_updates {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  member_id     Int?
  name          String?   @db.VarChar(255)
  mobile        String?   @db.VarChar(10)
  email         String?   @db.VarChar(128)
  linkedin      String?   @db.Text
  designation   String?   @db.VarChar(30)
  company       String?   @db.VarChar(30)
  addr          String?   @db.Text
  remarks       String?   @db.Text
  region        String?   @db.VarChar(20)
  batch         String?   @db.VarChar(20)
  n_updates     Int?      @default(1)
  update_1      String?   @db.VarChar(255)
  update_1_date DateTime? @db.Timestamp(0)
  update_2      String?   @db.VarChar(255)
  update_2_date DateTime? @db.Timestamp(0)
  update_3      String?   @db.VarChar(255)
  update_3_date DateTime? @db.Timestamp(0)
  update_4      String?   @db.VarChar(255)
  update_4_date DateTime? @db.Timestamp(0)
  update_5      String?   @db.VarChar(255)
  update_5_date DateTime? @db.Timestamp(0)
  update_6      String?   @db.VarChar(255)
  update_6_date DateTime? @db.Timestamp(0)
  update_7      String?   @db.VarChar(255)
  update_7_date DateTime? @db.Timestamp(0)
  update_8      String?   @db.VarChar(255)
  update_8_date DateTime? @db.Timestamp(0)
  update_9      String?   @db.VarChar(255)
  update_9_date DateTime? @db.Timestamp(0)
  last_update   String?   @db.VarChar(255)
  created_at    DateTime  @default(now()) @db.Timestamp(0)
  updated_at    DateTime  @updatedAt @db.Timestamp(0)

  @@map("alumni-updates")
}

model audience_capacity {
  id       Int    @id @default(autoincrement())
  place    String @db.VarChar(20)
  type     String @db.VarChar(1)
  capacity Int
  qr_entry String @db.VarChar(20)
  qr_exit  String @db.VarChar(20)

  @@map("audience-capacity")
}

model college {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @db.VarChar(64)
  state      String    @db.VarChar(30)
  score      Int?      @default(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
  created_at DateTime  @default(now()) @db.Timestamp(0)
}

model college_requests {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @db.VarChar(64)
  state      String    @db.VarChar(30)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
  created_at DateTime  @default(now()) @db.Timestamp(0)
}

model company_updates {
  id            Int       @id @default(autoincrement())
  member_id     Int
  company_name  String    @db.VarChar(255)
  contact_name  String    @db.VarChar(255)
  mobile        String    @db.VarChar(20)
  email         String    @db.VarChar(128)
  post          String?   @db.Text
  addr          String?   @db.Text
  remarks       String?   @db.Text
  update_1      String    @db.VarChar(255)
  update_1_date DateTime  @default(now()) @db.Timestamp(0)
  update_2      String    @db.VarChar(255)
  update_2_date DateTime? @db.Timestamp(0)
  update_3      String    @db.VarChar(255)
  update_3_date DateTime? @db.Timestamp(0)
  update_4      String    @db.VarChar(255)
  update_4_date DateTime? @db.Timestamp(0)
  update_5      String    @db.VarChar(255)
  update_5_date DateTime? @db.Timestamp(0)
  update_6      String    @db.VarChar(255)
  update_6_date DateTime? @db.Timestamp(0)
  update_7      String    @db.VarChar(255)
  update_7_date DateTime? @db.Timestamp(0)
  update_8      String    @db.VarChar(255)
  update_8_date DateTime? @db.Timestamp(0)
  update_9      String    @db.VarChar(255)
  update_9_date DateTime? @db.Timestamp(0)
  n_updates     Int       @default(1)
  last_update   String    @db.VarChar(255)
  created_at    DateTime  @default(now()) @db.Timestamp(0)
  updated_at    DateTime  @updatedAt @db.Timestamp(0)

  @@map("company-updates")
}

model complaint_updates {
  id         Int      @id @default(autoincrement())
  comp_id    Int
  status     String   @db.VarChar(10)
  remarks    String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
  updated_by String   @db.VarChar(64)
}

model complaints {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  sf_id          String    @db.VarChar(10)
  type           String    @db.VarChar(20)
  transaction_id String?   @db.VarChar(15)
  issue          String    @db.Text
  status         String    @db.VarChar(10)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  remarks        String    @db.Text
  updated_by     String    @db.VarChar(64)

  @@index([sf_id], map: "complaints_sf_id_foreign")
}

model event_registration {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  leader_id    Int       @db.UnsignedInt
  event_id     Int       @db.UnsignedInt
  group_status Boolean   @default(true)
  status       Boolean   @default(true)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  is_cert      Int       @default(0) @db.TinyInt
  submission   String    @default("Empty") @db.VarChar(3000)
  event_city   String    @default("") @db.VarChar(64)
  Score        Int       @default(0)
}

model event_registration_old {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  leader_id    Int       @db.UnsignedInt
  event_id     Int       @db.UnsignedInt
  group_status Boolean   @default(true)
  status       Boolean   @default(true)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  is_cert      Int       @default(0) @db.TinyInt
  submission   String    @default("Empty") @db.VarChar(3000)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model event_updates {
  id                Int
  event_id          Int
  tagline           String   @db.VarChar(128)
  writeup           String   @db.Text
  rules             String   @db.Text
  min_participation Int
  max_participation Int
  is_group          Boolean
  event_status      Boolean
  created_at        DateTime @default(now()) @db.Timestamp(0)
  updated_at        DateTime @updatedAt @db.Timestamp(0)
  updated_by        String   @db.VarChar(64)

  @@ignore
}

model events {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  genre_id          Int       @db.UnsignedInt
  name              String    @db.VarChar(64)
  tagline           String    @db.VarChar(128)
  writeup           String    @db.Text
  rules             String    @db.Text
  min_participation Int
  max_participation Int
  is_group          Boolean   @default(false)
  event_status      Boolean   @default(true)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  latitude          String    @default("22 N") @db.VarChar(70)
  longitude         String    @default("66 E") @db.VarChar(70)
  zoom              Int       @default(4)
  Score             Int       @default(0)

  @@unique([genre_id, name], map: "events_genre_id_name_unique")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model exclusives {
  id          Int
  name        String   @db.VarChar(255)
  url         String?  @db.VarChar(255)
  coupon_code String?  @db.VarChar(255)
  offer       String?  @db.VarChar(255)
  tnc         String?  @db.VarChar(255)
  photo       String   @db.VarChar(255)
  updated_at  DateTime @default(now()) @db.Timestamp(0)

  @@ignore
}

model exclusives_updates {
  id           Int      @id @default(autoincrement())
  exclusive_id Int
  name         String   @db.VarChar(255)
  url          String   @db.VarChar(255)
  coupon_code  String   @db.VarChar(255)
  offer        String   @db.VarChar(255)
  tnc          String   @db.VarChar(255)
  photo        String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamp(0)
  updated_at   DateTime @updatedAt @db.Timestamp(0)
  updated_by   String   @db.VarChar(64)
}

model faq {
  id       Int    @id
  question String @db.Text
  answer   String @db.Text
}

model fbshare {
  sno        Int       @id @default(autoincrement())
  admin_id   Int
  link       String    @unique(map: "link") @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([admin_id], map: "admin_id")
}

model forever_heads {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  email       String   @db.VarChar(50)
  password    String   @db.VarChar(35)
  mobile      String   @db.VarChar(10)
  permissions String   @db.VarChar(50)
  token       String   @db.VarChar(15)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @updatedAt @db.Timestamp(0)

  @@map("forever-heads")
}

model genres {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  genre      String    @db.VarChar(64)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model group_members {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  group_id      Int       @db.UnsignedInt
  member_id     Int       @db.UnsignedInt
  event_id      Int       @db.UnsignedInt
  member_status Boolean   @default(true)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
}

model group_members_old {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  group_id      Int       @db.UnsignedInt
  member_id     Int       @db.UnsignedInt
  event_id      Int       @db.UnsignedInt
  member_status Boolean   @default(true)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
}

model hilarity {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(50)
  mobile     String   @unique(map: "mobile") @db.VarChar(10)
  email      String   @unique(map: "email") @db.VarChar(128)
  college    String   @db.VarChar(50)
  yop        String   @db.VarChar(4)
  city       String   @db.VarChar(50)
  track_link String   @db.VarChar(200)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
}

model hospitality {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  sf_id          String    @db.VarChar(10)
  train_name     String    @db.VarChar(64)
  train_number   String    @db.VarChar(10)
  boarding_place String    @db.VarChar(64)
  number_people  Int       @db.UnsignedInt
  arrival_date   String    @db.VarChar(10)
  arrival_time   String    @db.VarChar(10)
  leaving_date   String    @db.VarChar(10)
  leaving_time   String    @db.VarChar(10)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
}

model hospitality_updates {
  id             Int      @id @default(autoincrement())
  hosp_id        String   @db.VarChar(10)
  train_name     String   @db.VarChar(64)
  train_number   String   @db.VarChar(10)
  boarding_place String   @db.VarChar(64)
  number_people  Int
  arrival_date   String   @db.VarChar(10)
  arrival_time   String   @db.VarChar(10)
  leaving_date   String   @db.VarChar(10)
  leaving_time   String   @db.VarChar(10)
  updated_by     String   @db.VarChar(64)
  created_at     DateTime @default(now()) @db.Timestamp(0)
  updated_at     DateTime @updatedAt @db.Timestamp(0)
}

model ideas {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  title      String    @db.Text
  idea       String    @db.Text
  category   String    @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  graded     Int       @default(0)

  @@index([user_id], map: "ideas_user_id_foreign")
}

model meeting {
  id           Int      @id @default(autoincrement())
  instructions String   @db.Text
  date         DateTime @db.Date
  added_by     Int
  duration     Int
  chairperson  String   @db.VarChar(50)
  bench        String   @db.VarChar(200)
  absents      String   @db.VarChar(200)
  updated_at   DateTime @updatedAt @db.Timestamp(0)
  created_at   DateTime @default(now()) @db.Timestamp(0)

  @@index([added_by], map: "scheduler id constraint")
}

model messages {
  sno        Int       @id @default(autoincrement()) @db.UnsignedInt
  admin_id   Int       @db.UnsignedInt
  ca_id      Int?      @db.UnsignedInt
  message    String    @db.Text
  to_ca      Int
  seen       Int       @default(0)
  seenbyca   Int       @default(0)
  state      String?   @db.VarChar(50)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([admin_id], map: "admin_id")
  @@index([ca_id], map: "ca_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model migrations {
  id        Int    @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int

  @@ignore
}

model minute {
  id         Int      @id @default(autoincrement())
  meeting_id Int
  minute     String   @db.VarChar(500)
  checked_by String   @db.VarChar(500)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
}

model mp_contacts {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  submitted_by Int       @db.UnsignedInt
  name         String    @db.VarChar(128)
  mobile       String    @db.VarChar(10)
  email        String    @db.VarChar(128)
  college      String    @db.VarChar(255)
  city         String    @db.Text
  type         String    @db.Text
  contact_type String    @db.VarChar(14)
  por          String    @db.Text
  graded       Int       @default(0)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)

  @@index([submitted_by], map: "mp_contacts_submitted_by_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model notifications {
  id           Int       @db.UnsignedInt
  user_id      Int       @db.UnsignedInt
  notification String    @db.Text
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model notifications_main {
  id           Int
  user_id      String   @default("1") @db.VarChar(255)
  notification String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamp(6)

  @@ignore
}

model nukkad {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  team_id     String    @db.VarChar(50)
  team_name   String    @db.VarChar(50)
  leader_name String    @db.VarChar(50)
  mobile      String    @db.VarChar(10)
  email       String    @db.VarChar(128)
  college     String    @db.VarChar(100)
  city        String    @db.VarChar(50)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model nukkad_team_members {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  team_id    String    @db.VarChar(10)
  name       String    @db.VarChar(100)
  mobile     String    @db.VarChar(10)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model other_colleges_list {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  college String @db.VarChar(128)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String   @db.VarChar(255)
  token      String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@ignore
}

model payment_allowance {
  id         Int       @id @default(autoincrement())
  state      String    @db.VarChar(50)
  status     Int       @default(0)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
}

model poetry_english {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(50)
  mobile     String    @unique(map: "mobile") @db.VarChar(10)
  email      String    @unique(map: "email") @db.VarChar(128)
  college    String    @db.VarChar(50)
  yop        String    @db.VarChar(4)
  city       String    @db.VarChar(50)
  track_link String    @db.VarChar(200)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model poetry_hindi {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(50)
  mobile     String    @unique(map: "mobile") @db.VarChar(10)
  email      String    @unique(map: "email") @db.VarChar(128)
  college    String    @db.VarChar(50)
  yop        String    @db.VarChar(4)
  city       String    @db.VarChar(50)
  track_link String    @db.VarChar(200)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model por {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model probable_participants {
  id              Int       @db.UnsignedInt
  user_id         Int       @db.UnsignedInt
  event_id        Int       @db.UnsignedInt
  probable_status Int       @default(1)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@ignore
}

model pronites {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  writeup String @db.VarChar(255)
  photo   String @db.VarChar(255)
}

model publicity_verification {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  file_name     String    @db.Text
  status        Int       @default(0)
  submitted_by  Int       @db.UnsignedInt
  file_new_name String    @db.Text
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  graded        Int       @default(0)
}

model reminder {
  id          Int @id @default(autoincrement())
  user_id     Int
  activity_id Int
}

model request_remove_ca {
  sno        Int       @id @default(autoincrement())
  ca_id      Int       @db.UnsignedInt
  admin_id   Int       @db.UnsignedInt
  reason     String?   @db.VarChar(500)
  approved   Int       @default(0)
  updated_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
}

model scoreboard {
  id               Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id          Int       @db.UnsignedInt
  friends_who_like Int
  friends_initial  Int
  shares           Int
  publicant        Int
  score            Float
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model sf_team {
  id       Int
  sub_team String @db.VarChar(255)
  name     String @db.VarChar(255)
  phone    Int
  email    String @db.VarChar(255)
  linkedin String @db.VarChar(255)
  fb       String @db.VarChar(255)
  photo    String @db.VarChar(255)

  @@ignore
}

model sfidol {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @db.VarChar(50)
  mobile     String    @db.VarChar(10)
  email      String    @db.VarChar(128)
  college    String    @db.VarChar(50)
  yop        String    @db.VarChar(4)
  city       String    @db.VarChar(50)
  track_link String    @db.VarChar(200)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model sfteam {
  id         Int      @db.UnsignedInt
  name       String   @db.VarChar(255)
  sub_team   String   @db.VarChar(255)
  fb         String   @db.VarChar(255)
  linkedin   String   @db.VarChar(255)
  email      String   @db.VarChar(255)
  mobile     String   @db.VarChar(10)
  photo      String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)

  @@ignore
}

model shakealeg {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @db.VarChar(50)
  mobile     String    @db.VarChar(10)
  email      String    @db.VarChar(128)
  college    String    @db.VarChar(50)
  yop        String    @db.VarChar(4)
  city       String    @db.VarChar(50)
  track_link String    @db.VarChar(200)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model shuffle {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  team_id     String    @db.VarChar(50)
  team_name   String    @db.VarChar(50)
  leader_name String    @db.VarChar(50)
  mobile      String    @db.VarChar(10)
  email       String    @db.VarChar(150)
  college     String    @db.VarChar(50)
  city        String    @db.VarChar(50)
  track_link  String    @db.VarChar(200)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model shuffle_team_members {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  team_id    String    @db.VarChar(10)
  name       String    @db.VarChar(100)
  mobile     String    @db.VarChar(10)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model silent_dj_payments {
  id             Int      @id @default(autoincrement())
  txn_id         String   @db.VarChar(50)
  tcf_txn_id     String   @db.VarChar(10)
  txn_amount     String   @db.VarChar(30)
  txn_count      Int
  user_id        String   @db.VarChar(10)
  name           String   @db.VarChar(20)
  phone          String   @db.VarChar(11)
  gender         String   @db.VarChar(1)
  isKgpStudent   Int      @default(0)
  payment_status Int      @default(0)
  day            String   @db.VarChar(64)
  slot           String   @db.VarChar(64)
  slip_issued    Int      @default(0)
  status         String   @db.VarChar(20)
  created_at     DateTime @default(now()) @db.Timestamp(0)
  updated_at     DateTime @updatedAt @db.Timestamp(0)
}

model silent_dj_slots {
  id         Int      @id
  day        String   @db.VarChar(64)
  slot       String   @db.VarChar(64)
  number     Int
  updated_at DateTime @updatedAt @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model spons_list {
  sno       Int
  sub_title String @db.VarChar(50)
  name      String @db.VarChar(50)
  link_img  String @db.VarChar(100)
  link_web  String @db.VarChar(100)
  title_id  Int
  year      Int
  order_no  Int

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model spons_title {
  id        Int
  title     String @db.VarChar(50)
  number    Int
  sizeTitle String @db.VarChar(15)
  year      Int
  order_no  Int

  @@ignore
}

model team {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(23)
  mobile   String? @db.VarChar(13)
  email    String? @db.VarChar(36)
  password String? @default("abcd1234") @db.VarChar(30)
  por      String  @db.VarChar(30)
  type     String  @db.VarChar(3)
}

model testimonials {
  id           Int     @id
  testimonial  String  @db.Text
  author       String  @db.VarChar(255)
  author_photo String? @db.VarChar(255)
}

model transactions {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  payer_id      Int       @db.UnsignedInt
  txn_extref    String    @db.VarChar(64)
  txn_timestamp DateTime  @default(now()) @db.Timestamp(0)
  txn_amount    String    @db.VarChar(64)
  err_code      String    @db.VarChar(10)
  txn_ref_no    String    @db.VarChar(64)
  status        String    @db.VarChar(64)
  resp_msg      String    @db.VarChar(128)
  card_no       String    @db.VarChar(64)
  txn_type      String    @db.VarChar(64)
  card_type     String    @db.VarChar(64)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @updatedAt @db.Timestamp(0)
  customer_id   String    @db.VarChar(255)
  udf           String    @db.Text

  @@index([payer_id], map: "payer_id")
  @@index([txn_extref], map: "txn_extref")
}

model two_for_a_tango {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  team_id     String    @db.VarChar(50)
  team_name   String    @db.VarChar(50)
  leader_name String    @db.VarChar(50)
  mobile      String    @db.VarChar(10)
  email       String    @db.VarChar(150)
  college     String    @db.VarChar(50)
  city        String    @db.VarChar(50)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model two_for_a_tango_team_members {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  team_id    String    @db.VarChar(10)
  name       String    @db.VarChar(100)
  mobile     String    @db.VarChar(10)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model txn_err_log {
  id         Int      @id @default(autoincrement())
  txn_extref String?  @db.VarChar(255)
  txn_ref_no String?  @db.VarChar(255)
  err_id     Int
  err_msg    String   @db.VarChar(1023)
  name       String   @db.VarChar(255)
  email      String   @db.VarChar(255)
  payment_at DateTime @default(now()) @db.Timestamp(0)
}

model user {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  name              String    @db.VarChar(255)
  password          String    @db.VarChar(255)
  dob               String    @db.VarChar(64)
  email             String    @unique(map: "user_email_unique") @db.VarChar(128)
  security_qn       String    @default("Security Question") @db.VarChar(256)
  security_ans      String    @default("Answer") @db.VarChar(256)
  alt_email         String?   @db.VarChar(255)
  fb_link           String?   @db.VarChar(355)
  college           String    @default("KGP") @db.VarChar(128)
  yop               Int
  mobile            String    @unique(map: "user_mobile_unique") @db.VarChar(10)
  por               String    @db.Text
  addr              String    @db.Text
  city              String    @db.Text
  state             String    @db.Text
  multiplier        Int
  status            Int       @default(1)
  sf_id             String    @unique(map: "user_sf_id_unique") @db.VarChar(255)
  gender            String    @db.VarChar(1)
  is_ca             Int       @default(0)
  is_final_ca       Boolean   @default(false)
  is_fb_user        Int       @default(0)
  payment_status    Int       @default(0)
  verify_status     Int       @default(0)
  card_issued       Int       @default(0)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  updated_by        String?   @db.VarChar(100)
  reg_complete      Int       @default(0)
  payment_allowance Int       @default(1)
  is_caA            Int       @default(0)
  ca_list           String?   @db.VarChar(10000)
  live_phase        Int       @default(0)
  live_venue        Int       @default(0)
  qr                String    @db.VarChar(13)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user_genres {
  id         Int       @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  genre_id   Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@ignore
}

model user_old_2022 {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  name              String    @db.VarChar(255)
  password          String    @db.VarChar(255)
  dob               String    @db.VarChar(64)
  email             String    @unique(map: "user_email_unique") @db.VarChar(128)
  security_qn       String    @default("Security Question") @db.VarChar(256)
  security_ans      String    @default("Answer") @db.VarChar(256)
  alt_email         String?   @db.VarChar(255)
  fb_link           String?   @db.VarChar(355)
  college           String    @default("KGP") @db.VarChar(128)
  yop               Int
  mobile            String    @unique(map: "user_mobile_unique") @db.VarChar(10)
  por               String    @db.Text
  addr              String    @db.Text
  city              String    @db.Text
  state             String    @db.Text
  multiplier        Int
  status            Int       @default(1)
  sf_id             String    @unique(map: "user_sf_id_unique") @db.VarChar(255)
  gender            String    @db.VarChar(1)
  is_ca             Int       @default(0)
  is_final_ca       Boolean   @default(false)
  is_fb_user        Int       @default(0)
  payment_status    Int       @default(0)
  verify_status     Int       @default(0)
  card_issued       Int       @default(0)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  updated_by        String?   @db.VarChar(100)
  reg_complete      Int       @default(0)
  payment_allowance Int       @default(1)
  is_caA            Int       @default(0)
  ca_list           String?   @db.VarChar(10000)
  live_phase        Int       @default(0)
  live_venue        Int       @default(0)
  qr                String    @db.VarChar(13)
}

model user_payments {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  transaction_id Int       @db.UnsignedInt
  user_id        Int       @db.UnsignedInt
  payer_id       Int
  hall           String?   @db.Text
  payment_status String    @db.VarChar(20)
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @updatedAt @db.Timestamp(0)

  @@index([transaction_id], map: "user_payments_transaction_id_foreign")
  @@index([user_id], map: "user_payments_user_id_foreign")
}

model user_updates {
  id             Int       @id @default(autoincrement())
  user_id        Int
  name           String    @db.VarChar(100)
  email          String    @db.VarChar(150)
  mobile         String    @db.VarChar(10)
  college        String    @db.VarChar(200)
  city           String    @db.VarChar(100)
  state          String    @db.VarChar(100)
  gender         String    @db.VarChar(1)
  yop            Int
  payment_status Int
  verify_status  Int       @default(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_by     String    @db.VarChar(100)
}

model venue_management {
  id                 Int       @id @default(autoincrement()) @db.UnsignedInt
  venue_name         String    @db.Text
  venue_contact      String    @db.Text
  venue_address      String    @db.Text
  venue_city         String    @db.Text
  venue_type_remarks String    @db.Text
  venue_image_path   String    @db.Text
  submitted_by       Int       @db.UnsignedInt
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
  graded             Int       @default(0)

  @@index([submitted_by], map: "venue_management_submitted_by_foreign")
}

model winners {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  event_id     Int       @db.UnsignedInt
  group_status Int       @db.UnsignedTinyInt
  position     String?   @db.VarChar(20)
  reg_id       String    @db.VarChar(10)
  member_id    Int       @db.UnsignedInt
  name         String
  email        String    @db.VarChar(128)
  alt_email    String?   @db.VarChar(177)
  phone        String    @db.VarChar(10)
  alt_phone    BigInt?
  address      String    @db.Text
  alt_address  String?   @db.Text
  ct_status    Int?      @default(0) @db.UnsignedInt
  ft_status    Int       @default(0) @db.UnsignedInt
  admin_id     Int       @db.UnsignedInt
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)

  @@index([admin_id], map: "winners_admin_id_foreign")
  @@index([event_id], map: "winners_event_id_foreign")
  @@index([member_id], map: "winners_member_id_foreign")
  @@index([reg_id], map: "winners_reg_id_foreign")
}

model winners_group_members {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  leader_id  Int       @db.UnsignedInt
  member_id  Int       @db.UnsignedInt
  ct_status  Int       @default(0) @db.UnsignedInt
  admin_id   Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([admin_id], map: "winners_group_members_admin_id_foreign")
  @@index([leader_id], map: "winners_group_members_leader_id_foreign")
  @@index([member_id], map: "winners_group_members_member_id_foreign")
}
